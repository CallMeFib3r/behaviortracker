apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../config/dependency/dependencies.gradle'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "fr.bowser.behaviortracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        resConfigs "en", "fr"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            versionNameSuffix ".dev"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "density"

    productFlavors {
        // Dimension flavors
        universal {
            dimension "density"
        }
        mdpi {
            dimension "density"
            resConfigs "mdpi"
        }
        hdpi {
            dimension "density"
            resConfigs "hdpi"
        }
        xhdpi {
            dimension "density"
            resConfigs "xhdpi"
        }
        xxhdpi {
            dimension "density"
            resConfigs "xxhdpi"
        }
        xxxhdpi {
            dimension "density"
            resConfigs "xxxhdpi"
        }
    }

    sourceSets {
        main {
            // Split resources.
            // https://medium.com/google-developer-experts/android-project-structure-alternative-way-29ce766682f0#.sjnhetuhb
            res.srcDirs = [
                    'src/main/res/common',
                    'src/main/res/home',
                    'src/main/res/timer',
                    'src/main/res/stat',
                    'src/main/res/createtimer',
                    'src/main/res/timerlist',
            ]
        }
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

dependencies {

    // Kotlin
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.20"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.20"

    // Support library
    implementation rootProject.ext.dependencies.supportConstraint
    implementation rootProject.ext.dependencies.supportDesign
    implementation rootProject.ext.dependencies.supportCardView

    // Architecture component
    implementation rootProject.ext.dependencies.room
    kapt rootProject.ext.dependencies.annotationProcessorRoom

    // Other
    implementation rootProject.ext.dependencies.dagger2
    kapt rootProject.ext.dependencies.annotationProcessorDagger2

    // Test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

}

android.applicationVariants.all { variant ->
    makeVersionCodeForVariant(variant)
}

def makeVersionCodeForVariant(variant) {
    def dimensions = getProductFlavorsDimensions(variant.productFlavors)
    def densityNameDimension = dimensions.get("density")

    if (densityNameDimension == null) {
        throw new IllegalStateException("Missing density dimension")
    }

    def versionCode = makeVersionCode(densityNameDimension)
    variant.outputs.all {
        setVersionCodeOverride(versionCode)
    }
}

static def getProductFlavorsDimensions(productFlavors) {
    def dimensions = new HashMap<String, String>()
    productFlavors.each { productFlavor ->
        def dimension = productFlavor.getDimension()
        def name = productFlavor.getName()
        dimensions.put(dimension, name)
    }
    return dimensions
}

def makeVersionCode(String densityDimension) {
    def densityCodes = [universal: 1, mdpi: 2, hdpi: 3, xhdpi: 4, xxhdpi: 5, xxxhdpi: 6]
    def densityCode = densityCodes.get(densityDimension)
    return densityCode * 1_000_00_00 + rootProject.ext.versionCode
}
